
	1、冯诺依曼和哈佛结构
	冯诺依曼：是一种将程序指存储器和数据存储器合并在一起的存储结构。程序指令存储地址和数据存储地址指向同一个存储器
			  的不同物理位置，采用单一的地址及数据总线，程序指令和数据的宽度相同。处理器执行指令时，先从存储器中取出
			  指令码，再读取操作数执行运算，即使单条指令也要耗费几个甚至几十个周期，在高速运算时，在传输通道上会出现瓶颈效应。
	哈佛结构：是一种将程序指令和数据存储分开的存储结构。哈佛结构是一种并行体系结构，他的主要特点是将程序和数据存储在不同的存储
			  空间中，即程序存储器和数据存储器是两个相互独立的存储器，每个存储器独立编址、独立访问。两个存储器有4套总线：程序
			  的数据和地址总线，数据的地址和数据总线。这种总线结构可以允许在一个周期内同时获取指令字和操作数，从而提高了执行速
			  度，使数据的吞吐率提高了1倍。
	
	2、CISC和RISC
	   复杂指令集（CISI）: 早期为了提高运算速率，将越来越多的复杂指令加入到指令系统中，以提高计算机的处理速率，这就形成了复杂指令
						   集计算机体系。为了在有限的指令长度内实现更多的指令，又设计了操作码扩展。为了达到操作码扩展的先决条件-
						   减少地址码，设计师又发明了各种寻址方式：基址寻址、相对寻址、以最大限度地压缩地址码长度，为操作码预留出
						   空间。
						   为了支持复杂指令集，CISI通常包括一个复杂的数据通路和一个微程序控制器。微程序控制器由一个微程序存储器、一
						   个微程序计数器和地址选择逻辑构成。在为微程序存储器中的每一个字都表示一个控制字，并且包含了一个时钟周期内
						   所有数据通路控制信号的值。这就意味着控制字中的每一位表示一个数据通路控制线的值。此外每个处理器指令都由一
						   系列的控制字组成。当从内存中取出这样的一条指令时，首先要把它放在指令寄存器中，然后地址选择逻辑在根据它来
						   确定微程序存储器中相应的控制字顺序起始地址。当把该起始地址放入MicroPC中后，就从微程序内存中找到相应的控制
						   字，并利用它在数据通路中把数据从一个寄存器传送到另一个寄存器。由于MicroPC中的地址并发递增来向下一个控制字，
						   因此对于序列中的每个控制器都会重复一遍这一步骤。最终，当执行完最后一个控制字时，就从内存中取出一条新的指令，
						   整个过程会重复进行。
					CISC体系结构的一些问题：
					1、指令的2/8规律：20%的比较简单的指令被反复使用，80%的指令很少使用。
					2、VLSI制造工艺要求CPU控制逻辑的规整性，而CISC处理器中，为了实现大量复杂的指令，控制逻辑极部规整，给VLSI工艺造成
						很大困难。
					3、软硬件的功能划分：为了支持目标程序的优化，支持高级语言和编译程序，增加了许多复杂的指令，用一条指令来代替一串指
					   令。这些复杂指令简化目标程序，缩小了高级语言与机器指令之间的语义差距。但是，增加了这些复杂指令并部等于缩短了程
					   序的执行时间。为了实现复杂的指令，不仅增加了硬件的复杂程序，而且使指令的执行周期大大加长。这里有一个软件与硬件
					   的功能如何恰当分配的问题。通过增强指令系统的功能，简化了软件，增加了硬件的复杂程度。然而。由于指令复杂了，指令
					   的执行时间必然加长，从而有可能使整个程序的执行时间反而增加。因此，在计算机体系结构设计中，软硬件功能划分必须合
					   适。
					   
	   精简指令集（RISC）：RISC的着眼点不是简单的放在简化指令系统上，而是通过简化指令系统使计算机的结构更加简单合理，从而提高运算效率。
						   RISC处理器的数据通路通常由一个大的寄存器文件和一个ALU组成，一个大的寄存器文件是十分必要的，因为它包含了程序
						   计算中所有的操作数和结果。通过Load指令将数据放到寄存器文件中，通过Store指令将其放回内存。寄存器文件越大，代
						   码中的Load和Store指令的数目就越少。当RISC执行一序列指令时，指令管道首先将指令放到寄存器中，然后将该指令解码
						   并从寄存器文件中操作数，最后RISC做下面两件事情之一：在ALU中执行所需的操作，或者从数据缓存里面读/写数据。应
						   注意每个指令执行仅仅占用大约3个时钟周期，这就意味着指令流水可能短小且高效。而且仅在数据分支相关性的情况下才
						   会使用较多的时钟周期。
						   由于所有的操作数都包含在寄存器文件中，而且只使用了几种简单的寻址方式，所以同样可以简化数据通路的设计。另外，
						   每个操作要执行一个时钟周期而每个指令要执行3个时钟周期，因此控制单元也可以很简单，而且可能使用随机逻辑而不是
						   微程序控制来实现。总之，RISC中控制和数据通路的简化导致了简短的时钟周期，并最终达到了更高的性能。
						   然而，RISC体系结构的简化则要求一个更为复杂的编译器。例如，RISC设计不会在指令相关性发生时就停止指令流水线，这
						   就意味着编译器由责任产生出无相关性的代码，或者可以通过时延指令的产生，或者对指令进行重新排序。而且由于指令数
						   目的减少，RISC编译器将需要一些列的RISC指令来完成复杂的操作，也给编译器带来了灵活的优化性能。
						       计算机执行程序所需的时间P可以用公式计算：
								P=I✖CPI✖T
								I是高级语言程序编译后在机器上运行的指令数，
								CPI为执行每条指令所需的平均周期数
								T是每个机器周期的时间。
							
							RISC具有以下特点：
							优先选取使用频率最高的一些指令，以及一些很有用但不复杂的指令，避免使用复杂指令。
							指令长度固定，指令格式种类少，寻址方式种类少。指令之间各字段的划分比较一致，各字段的功能也比较规整。
							只有Load/Store指令能够访问寄存器，其余指令的操作都在寄存器之间进行。
							CPU中通用寄存器数量相当多，算术逻辑运算指令的操作数都在通用寄存器中存取。
							大部分指令在一个或小于一个机器周期内完成。
							一硬布线控制逻辑为主，不用或少用微码控制。
							一般高级语言编程，特别重视编译优化工作，以减少程序执行时间。
							
	3、流水线技术
	   3.1、概念：指令流水线式将一条指令分解成一连串执行的子过程。在CPU中把一条指令的串行执行子过程变为若干指令的字过程在CPU中重叠
				  执行。是将重复的时序分解成若干子过程，而每一个子过程都可以有效的在其专用功能段上与其他子过程同事执行。
				  指令的执行过程：取指令、分析指令和执行指令3个子过程。
				  早期的指令执行是顺序执行。
				  现在的数字计算机在不同程度上采取重叠处理方式，重叠的程度取决于存储体与运算部件的多少及控制指令部件的工作方式。
				  
				  重叠处理：分析指令和执行指令，分析完N条后（处于空闲，可分析N+1条），此时分析第N+1条指令和执行第N条指令同时进行。
							两条指令在时间上重叠。
				  细分后的指令过程可分为多个子过程，流水线方式可以同时执行多条指令。
				  
	   3.2、特点：
				流水线可分为若干相互联系的子过程。
				实现子过程的功能所需时间尽可能相等
				形成流水线处理，需要一段准备时间
				指令流水不能顺序执行时，会使流水线过程中断，再形成流水线过程需要时间。
				
	   3.3、结构分类：
					按完成的功能：单功能流水线、多功能流水线。
					按同一时间内各段之间的连接方式分类：静态流水线、动态流水线。
					按数据表示分类：标量流水线处理器、向量流水线处理器
				
	   3.4、主要指标：
					吞吐率：单位时间里流水线处理机流出的结果数。（对指令而言就是单位时间里执行的指令数）。
					如果流水线的子过程所用的时间不一样长，则吞吐率P应为最长子过程的倒数：
										P=1/max{▲t1,▲t2,....▲tm}
					建立时间：流水线开始工作，必须经过一定的时间才能达到最大吞吐率，这就是建立时间。
					若m个子过程建立所用的时间一样，均为t1，则建立时间T=m▲t1。
	
	4、信息存储的字节顺序
		4.1、大端和小端存储法
			  计算机使用称为字节的8位（Bit）的数据块做为最小的可寻址的存储器单位，而不是访问存储器中单独的位。
			  存储器的每一个字节都由一个唯一的数字来标识，称为它的地址，所有可能地址的集合称为存储空间。
			  每一种微处理器都用一个字长表明整数和指令数据的大小。字长决定了微处理器的寻址能力，即虚拟地址空间的大小。
			   对于一个字长为n位的微处理器，它的虚拟地址范围为0-2的n次方-1（32位的微处理器，可访问4GB的虚拟地址空间）
			   C语言中常用数据类型以及占用内存情况（32位微处理器中所占字节）
			   char 1字节      short int 2字节     int  4字节     long int 4 字节  float  4字节  double 8字节

			小端字节存储法：低字节数据存放在内存低地址，高字节数据存放在内存高地址处。
			大端字节存储法：高字节数据存放在内存低地址，低字节数据存放在内存高地址处。
			十六进制数：离0X越近的是高字节。
			空间地址：起始地址是低地址，越往后越高。
			
		4.2、可移植性问题：当不同的存储顺序的微处理器间进行程序移植时，要注意存储模式的影响。
		
		4.3、通信中的存储顺序问题：网络通信中，IP协议定义了标准的网络字节顺序。该字节顺序被用于所有的设计使用在IP协议上的
								   数据包、高级协议和文件格式上。
								   
		4.4、数据格式的存储顺序：时间格式的排序。注意年份必须用4位数字标识，月份和日数分别用2位表示。因此，个位数和月需要在
								 前面填补一个0。
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	